function [k,s] = KFILTER(A,G,V11,V22,V12)%function [k,s] = kfilter(A,G,V11,V22,V12)%KFILTER can have arguments: (A,G,V11,V22) if there are no cross% products, V12=0.%     KFILTER calculates the kalman gain, k, and the stationary%     covariance matrix, s, using the Kalman filter for:%		x[t+1] = Ax[t] + Bu[t] + w1[t+1]%               y[t] = Gx[t] + Du[t] + w2[t]%               E [w1(t+1)] [w1(t+1)]' =  [V11   V12;%                 [ w2(t) ] [ w2(t) ]      V12' V22 ]%  where x is the mx1 vector of states, u is the nx1 vector of controls, y is%  the px1 vector of observables, A is mxm, B is mxn, G is pxm, V11 is mxm,%  V22 is pxp, V12 is mxp.RA = max(size(A));[RG,~] = size(G);if nargin == 4     V12 = zeros(RA,RG); endif rank(V22) == RG  A = A-(V12/V22)*G;  V11 = V11-V12*(V22\V12');  [k,s] = doubleo(A,G,V11,V22);  k = k+(V12/V22);else  sigma_t = .01*eye(RA);  dif = 1;  iter = 1;  maxiter = 1000;  while (dif > 1e-8 && iter < maxiter)    K0 = (A*sigma_t*G'+V12)/(V22+G*sigma_t*G');    sigma_t1 = A*sigma_t*A' + V11 -(A*sigma_t*G'+V12)*K0';    K1 = (A*sigma_t1*G'+V12)/(V22+G*sigma_t1*G');    dif = max(max(abs(K1-K0)));    iter = iter+1;    sigma_t = sigma_t1;  end  k = K1;  s = sigma_t;  if iter > maxiter     disp('WARNING: Iteration limit of 1000 reached in KFILTER.M');   endend